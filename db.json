{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/demo.css","path":"lib/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","path":"lib/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","path":"lib/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","path":"lib/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","path":"lib/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","path":"lib/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","path":"lib/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","path":"lib/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","path":"lib/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","path":"lib/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/mdui_043tiny/css/mdui.css","path":"lib/mdui_043tiny/css/mdui.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-nexmoe/source/lib/mdui_043tiny/js/mdui.js","path":"lib/mdui_043tiny/js/mdui.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1620618498104},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"514ca68cd6e909817c596c764ef5d866f7a7a577","modified":1620618510852},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"public/2021/05/10/hello-world/index.html","hash":"ea83a5ec263c7e68842c98fe7ebc81ecc05710f9","modified":1620699376416},{"_id":"public/archives/index.html","hash":"d5f42571fbb5a827e1d13c51c34ca00621b3d3f8","modified":1620699597284},{"_id":"public/archives/2021/index.html","hash":"0c73b66e19a274b098b4d98228f3d4d4858fc0a6","modified":1620699597284},{"_id":"public/archives/2021/05/index.html","hash":"1331f679b82fa18d62dbb2e30cac2fd4c6fcda69","modified":1620699597284},{"_id":"public/index.html","hash":"70fdcb939e65ec9de75f7d809fa6453de414b503","modified":1620699597284},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1620618541844},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1620618541844},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1620618541844},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1620618541844},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1620618541844},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1620618541844},{"_id":"public/css/style.css","hash":"a78e21f12ca1a7219e9ba70435b8991c9d5ac9de","modified":1620618732337},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1620618541844},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1620618541844},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1620618541844},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1620618541844},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1620618541844},{"_id":"themes/hexo-theme-nexmoe/.gitignore","hash":"e168042a3df82a3a61949d78c734138796e58bc2","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/_config.yml","hash":"e8849d358c99f73d5ede65e9c331e6f592d551d0","modified":1620616834535},{"_id":"themes/hexo-theme-nexmoe/README.md","hash":"2ed625faca48160b6fe2c7b9f71403c3e61a5da6","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/languages/default.yml","hash":"6ea68c1f57cfb0311a35625e929d47e9f8af850a","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/package.json","hash":"90eec01a712534e8e2a3e12301abfc497a8bfb4b","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/languages/en.yml","hash":"be92aee2d6976028f2ea3230a53422a460d18f3b","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/languages/ja.yml","hash":"1d6a998c9d296fa706f48bfea25a554796a01cda","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/languages/zh-CN.yml","hash":"6f800ff6fc534f8650bf78a09e424499fd92d6c0","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/languages/zh-HK.yml","hash":"02269dc74c26cedb8991be24d5937dd37dc9a366","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/index.ejs","hash":"73926b4e8e9cde0c1b174aeb6249c91af99ba5e5","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/archives.ejs","hash":"b36b2cb80fbf2bf1de6b9e6328911dec852fb77e","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/layout.ejs","hash":"e749e8a6ce94d578393f46bc0e741af766031a35","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/languages/zh-TW.yml","hash":"02269dc74c26cedb8991be24d5937dd37dc9a366","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/post.ejs","hash":"6891393b95391edb173ee8eac17c61805aaebab0","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"feb8a8754a6bd76bb4c612436b79a44f18bb2ec5","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_en.md","hash":"1de5315f528b54fd1be9f1c42bd14d9eee078dc6","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"0b267713fc9f986ef35b56ca3dfc55b2224395fd","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/py.ejs","hash":"7e45d20353dbfbe5da965ee5dffd71ff8e969f5b","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_en.md","hash":"8d52806087943924734c51e51d11ccbdc0617046","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/after-footer.ejs","hash":"fd24c71bc4635a942dffbaa8eeba8c92ca5fc130","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/analytics.ejs","hash":"a9066ea1f75b616e48ba1d5348b10f5721d7c700","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/comment.ejs","hash":"f1e739a0eb8077168074884590033a43d4e8533f","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/copyright.ejs","hash":"04872fb15a07b89210f30109ab12f7672a1a8c93","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/header.ejs","hash":"fc12dd84753adbc32494830cd053046c627931ec","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/paginator.ejs","hash":"1e2b53fdd4eccde3c5586f2c9a0ae817384b7404","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/site-verification.ejs","hash":"0e3f39f0b42c0d20c3424a6a06b2f08486b2141c","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/sidebar.ejs","hash":"ff2ba380abe9f938bea3e37986e3d6d4b6a6c202","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_widget/archive.ejs","hash":"ad6f38d8c4796a57a51cf7ab1d81be94de4d0883","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_widget/category.ejs","hash":"a46946f96a512c6e035491b767b1a60828ce85b8","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_widget/link.ejs","hash":"6696f929fefe1f81c6c7cedc9031c8d4bfabbdbd","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_widget/search.ejs","hash":"5e9bbef8274b0f1a390ccffe941dd0a859f19dfc","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_widget/recent_posts.ejs","hash":"ac93edcc618dcdad716e2549636e9834da2092d7","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_widget/social.ejs","hash":"3bcc461e1100fb03d4caf67cfdda20ad0de3b8c2","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_widget/tag.ejs","hash":"a14146c6177cc083f994c714ab414bb201ef1f07","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_widget/tagcloud.ejs","hash":"14a3b6ccdf4f122aa290aced7987ea9795e6faa8","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/scripts/helper/css_auto_version.js","hash":"63c90dac6ad0a102ef302bf9fd9e030d521a8232","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/scripts/tag/gallery.js","hash":"79a37a1f1cf6b90b34a6f620d230d77ec9a4cb7b","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/scripts/helper/image_auto_lazyload.js","hash":"7b49915276afa9dab6dc81e5155d69ad588acec8","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/scripts/helper/js_auto_version.js","hash":"338cb31ea975bbcb00a7fa5afb0294dbdc385165","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_analytics/baidu.ejs","hash":"ef3b445b93529c6591b560f7c4f1ebdca56e4553","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/js/app.js","hash":"7e0e026b3c8434ae6b4d79379b9bdb00e7ce95b7","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/css/style.styl","hash":"9bc9422d5ced58d791380f278779c2b556715245","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_analytics/cnzz.ejs","hash":"03d9d13ef82bceec59f73e525a1124df5f6f97d3","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_analytics/google.ejs","hash":"ec710def09c853e63dc4598ace5b6346035c1098","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_analytics/gtags.ejs","hash":"7f394a1d7560fd52c9d3ec654c9e374342942b2d","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_analytics/gtm-body.ejs","hash":"9e4d32cf44d3ed373ba0b3e8a714378be0b69a78","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_analytics/gtm-head.ejs","hash":"a0d96fe2a7f108cd6e2b8be5ab0b85d29e4dba57","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_comment/changyan.ejs","hash":"1d703bf1e19ec5f0721dac537f917a077899462b","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_comment/DiscussBot.ejs","hash":"c905c27f2e338dad0236ad3af60070629e3af97f","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_comment/disqus.ejs","hash":"48d8f5e4ac308f8a92a48f8f7dfe99e5465dcb6e","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_comment/disqusjs.ejs","hash":"477d18a9c061cc750f6468189bd16218b317b023","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_comment/gitalk.ejs","hash":"0fcfd92a3a70d1c2b0cbd3e484d2f842088a3863","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_comment/gitment.ejs","hash":"c04e14664b69c4a7f12fc88b547994ddd9a74e1d","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_analytics/la.ejs","hash":"92a267edbf6df81ccf4239c1047d1dc7b3f57cf5","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_comment/livere.ejs","hash":"af2ef5889f3f8a3326bcee017319586a0179e439","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_comment/valine.ejs","hash":"6a0c66594459db76d6abc99b88f1e23dbcc13cb6","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_analytics/tencent.ejs","hash":"e2e27f03fe5e22faf217858c7887849028905773","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_post/meta.ejs","hash":"0c4edfdd6691864684218c739c61d609935684a3","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/css/_partial/article.styl","hash":"4e748e651ca29eecac8176c6ccdb91af0634585e","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/css/_partial/archives.styl","hash":"8cea361ea7cf1007c6e8e49adc0430597bb9a497","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/layout/_partial/_post/tag.ejs","hash":"aa85d5e6f2af22811d699c86e45474da15527527","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/css/_partial/py.styl","hash":"58a0e0c92d8567074544a92530fc32860138a7cb","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","hash":"df3f126af2695d3dd839edcfda49b951b02f701e","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","hash":"1d1851c2197382a9b7cd3b3fcdef79a61ad331f6","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","hash":"01952f8f10c716cbb463b589a345e46f1b8cc101","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","hash":"bac40fc7b766297cbf645849e583e8cd6496b2d2","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","hash":"79e09161126917b9729bb7e5fa04a5c9c634e666","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","hash":"c6d700d47886901027f92836a9e3b807876733b3","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","hash":"b0f4b5501cbcaeaf15dc608359574a29bc4c4265","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","hash":"e292802913e6c248a17797dc24ecfc0a3473c3cf","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","hash":"9209e4f7e45d37e58356e5ede7ea9d6d9e922d77","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/mdui_043tiny/js/mdui.js","hash":"9feeebf8c11d8ce8549ec94896c630ba2334613c","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/source/lib/mdui_043tiny/css/mdui.css","hash":"b79ef94d2b11f8ce05ba048f5d74a3bd09f12e4d","modified":1620465164000},{"_id":"themes/hexo-theme-nexmoe/cover.png","hash":"23d58c5a7f388514246d49f27f1529be3fdbe09d","modified":1620465164000},{"_id":"public/lib/iconfont/iconfont.eot","hash":"1d1851c2197382a9b7cd3b3fcdef79a61ad331f6","modified":1620618732337},{"_id":"public/lib/iconfont/iconfont.svg","hash":"c6d700d47886901027f92836a9e3b807876733b3","modified":1620618732337},{"_id":"public/lib/iconfont/iconfont.ttf","hash":"b0f4b5501cbcaeaf15dc608359574a29bc4c4265","modified":1620618732337},{"_id":"public/lib/iconfont/iconfont.woff","hash":"e292802913e6c248a17797dc24ecfc0a3473c3cf","modified":1620618732337},{"_id":"public/lib/iconfont/iconfont.woff2","hash":"9209e4f7e45d37e58356e5ede7ea9d6d9e922d77","modified":1620618732337},{"_id":"public/js/app.js","hash":"7e0e026b3c8434ae6b4d79379b9bdb00e7ce95b7","modified":1620618732337},{"_id":"public/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1620618732337},{"_id":"public/lib/iconfont/iconfont.css","hash":"01952f8f10c716cbb463b589a345e46f1b8cc101","modified":1620618732337},{"_id":"public/lib/iconfont/iconfont.json","hash":"8fbdca1d1886c8c6d9bfe1fb105595c65050a175","modified":1620618732337},{"_id":"public/lib/iconfont/demo_index.html","hash":"df3f126af2695d3dd839edcfda49b951b02f701e","modified":1620618732337},{"_id":"public/lib/iconfont/iconfont.js","hash":"bac40fc7b766297cbf645849e583e8cd6496b2d2","modified":1620618732337},{"_id":"public/lib/mdui_043tiny/js/mdui.js","hash":"9feeebf8c11d8ce8549ec94896c630ba2334613c","modified":1620618732337},{"_id":"public/lib/mdui_043tiny/css/mdui.css","hash":"b79ef94d2b11f8ce05ba048f5d74a3bd09f12e4d","modified":1620618732337},{"_id":"source/_posts/C-UsersbufanxDesktopleecode-md.md","hash":"693d01118137abc1fb1a4481ac7e81f3f0ce19bc","modified":1620619471442},{"_id":"public/2021/05/10/C-UsersbufanxDesktopleecode-md/index.html","hash":"65504c8124fa464e005d5516b2d0fb7ce413b3b9","modified":1620619003718},{"_id":"source/_posts/leecode.md","hash":"1daae5ab8871e85b54de7bd128e19de8bfb092d6","modified":1620619396326},{"_id":"public/2021/05/10/leecode/index.html","hash":"a50d5c38fc4c55451c2245351864f9c4a6a1efa4","modified":1620619487463},{"_id":"source/_posts/abcd.md","hash":"5652bb2bbda1481bec49cafee849a5d70775888a","modified":1620694032044},{"_id":"source/_posts/Hello-World.md","hash":"3b5bdc935a6754eb39a534e8bccd2cf23fc8f353","modified":1620694268705},{"_id":"public/2021/05/11/Hello-World/index.html","hash":"5409ac6b3e809b95fa7e8e2804ead6b46f0dff1a","modified":1620699597284},{"_id":"public/2021/05/11/abcd/index.html","hash":"af8b3ea1538092e0fce2b1d6b51b7c7a2bb97c75","modified":1620699597284}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2021-05-11T00:48:33.000Z","_content":"\n#### 大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin,Jetpack Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享~","source":"_posts/Hello-World.md","raw":"---\ntitle: Hello World\ndate: 2021-05-11 08:48:33\ntags:\n---\n\n#### 大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin,Jetpack Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享~","slug":"Hello-World","published":1,"updated":"2021-05-11T00:51:08.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckojep1av0000hgu94lmg263g","content":"<h4 id=\"大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin-Jetpack-Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享\"><a href=\"#大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin-Jetpack-Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享\" class=\"headerlink\" title=\"大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin,Jetpack Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享~\"></a>大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin,Jetpack Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享~</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin-Jetpack-Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享\"><a href=\"#大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin-Jetpack-Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享\" class=\"headerlink\" title=\"大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin,Jetpack Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享~\"></a>大家好呀！本人是一个在读计科大学生，目前在进行Android开发，kotlin,Jetpack Compose，机器学习相关的学习。今后可能在这个平台上进行相关的分享~</h4>"},{"_content":"## leecode算法题\n\n<!--more-->\n\n## leecode1.缺失的数字\n\n####  解法：1\n\n```java\nclass Solution {\n    public int missingNumber(int[] nums) {\n     int[] str = new int[nums.length + 1];\n        for(int i = 0;i < nums.length;i++){\n            str[nums[i]] = 1;\n        }\n        int j=0;\n        for(;j < str.length;j++)\n            if(str[j] == 0)\n                break;\n                return j;\n}\n}\n```\n\n​\t\t因为给出的数据都是从0-n线性排列的 ，中间也只会缺少唯一一个数字，所以我们可以通过重新创造一个数组，让原数字变成在新数组中的下标位置，如果新数组下标与已知数字其中一个相同，则赋值为1，最后再遍历数组，返回值为空的元素的下标位置，即缺失的数字。\n\n#### 解法：2\n\n```java\nclass Solution {\n    public int missingNumber(int[] nums) {\n     int res = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tres ^= nums[i]^i;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\treturn res^nums.length;\n\n}\n}\n```\n\n​\t\t通过位运算的操作，在不确定少哪个数字的情况下，对所有的数字和从0-n的数字进行位运算，最终数值和下表都存在的数字位运算后结果为一，最终剩下i,即为缺失的那个数字。\n\n## leecode2.字母异位词分组\n\n``` java\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n             HashMap<String,ArrayList<String>> map=new HashMap<>();\n        for(String s:strs){\n            char[] ch=s.toCharArray();\n            Arrays.sort(ch);\n            String key=String.valueOf(ch);\n            if(!map.containsKey(key))    map.put(key,new ArrayList<>());\n            map.get(key).add(s);\n        }\n        return new ArrayList(map.values());\n\n    }\n}\n```\n\n​\t\t首先创建一张哈希表，然后遍历每一个数组，将字符串转化为数组后，对数组进行排序，并将排序后的数组作为键。如果哈希表中含有改键，则将该数组添加到对应的列表。否则，创建一张空表，并将该数组添加到空表中，往哈希表中添加对应的键和列表，然后用一个新建的列表来存储哈希表的key和value。\n\n## leecode3.金字塔转换矩阵\n\n``` java\nclass Solution {\n        public boolean pyramidTransition(String bottom, List<String> allowed) {\n            if(allowed==null||allowed.size()==0)return false;\n            HashMap<String,List<String>> dir=new HashMap<>(16);\n            for(String str:allowed)\n            {\n                String head=str.substring(0,2);\n                String ch=str.substring(2,3);\n                if(dir.containsKey(head))\n                {\n                    dir.get(head).add(ch);\n                }\n                else\n                {\n                    List<String>p=new ArrayList<>();\n                    p.add(ch);\n                    dir.put(head,p);\n                }\n            }\n            return(dfs(bottom, \"\",dir));}\n        boolean dfs( String last, String now, HashMap<String,List<String>> dir){\n            if(last.length()==2&&now.length()==1) {\n                return true;\n            }\n            if(now.length()==last.length()-1){\n                return dfs(now,\"\",dir);\n            }\n            int start=now.length();int end=now.length()+2;\n            List<String> p=dir.get(last.substring(start, end));\n            if(p==null) return false;\n            for (int i = 0; i < p.size(); i++) {\n                if(dfs(last,now+p.get(i),dir)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n}\n```\n\n​\t\t\n\n​\t\t先新建一张哈希表用来存储所有可能构成塔身的字母组合和构成塔身的字母。通过dfs算法，如果下层长度为2，上层长度为1，则递归结束，可以构成金字塔，返回值为真。如果下层塔身的长度是比上层塔身多一，则说明目前为止是可以继续构成金字塔的，继续递归就行。start是新开始检索的地址，如果p不存在，无法构成塔身。\n\n## leecode4.被围绕的区域\n\n``` java\nclass Solution {\n        public void solve(char[][] board) {\n            if(board==null||board.length==0){\n                return 0;\n            }\n            int m=board.length;\n            int n=board[0].length;\n            for(int i=0;i<m;i++){\n                for(int j=0;j<n;j++){\n                    boolean isEdge=(i==0||j==0||i==m-1||j==n-1);\n                    if(isEdge&&board[i][j]=='O'){//边界的'O'\n                        helper(board,i,j,m,n);//递归\n                    }\n                }\n            }\n            for(int i=0;i<m;i++){\n                for(int j=0;j<n;j++){\n                    if(board[i][j]=='O'){//除了边界的'O'替换\n                        board[i][j]='X';\n                    }\n                    if(board[i][j]=='*'){//边界的'O'再换回来\n                        board[i][j]='O';\n                    }\n                }\n            }\n        }\n\n        public void helper(char[][] board,int i,int j,int m,int n){\n            if(i<0||j<0||i>=m||j>=n||board[i][j]=='X'||board[i][j]=='*'){\n                return;\n            }\n            board[i][j]='*';\n            helper(board,i-1,j,m,n);//上\n            helper(board,i+1,j,m,n);//下\n            helper(board,i,j-1,m,n);//左\n            helper(board,i,j+1,m,n);//右\n        }\n\n    }\n```\n\n​\t\t首先判断矩阵是否合乎规范，如果矩阵为空或者矩阵只有一行，则返回0；m为矩阵行数，n为矩阵列数。然后遍历矩阵，找到边界上的o。然后从边界上的o分别向上下左右方向搜索。直到超出矩阵范围或者碰到不合乎规则的点（与边界连着的o点或者X点）跳出当层递归。当所有的边界上的o点都搜索完成后，结束helper函数。然后再次遍历数组，把所有o变成X，所有*变成o。\n\n## leecode5.最小路径和\n\n``` java\nclass Solution {\n    public int minPathSum(int[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0].length == 0) {\n            return 0;\n        }\n        int rows = grid.length, columns = grid[0].length;\n        int[][] dp = new int[rows][columns];\n        dp[0][0] = grid[0][0];\n        for (int i = 1; i < rows; i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n        for (int j = 1; j < columns; j++) {\n            dp[0][j] = dp[0][j - 1] + grid[0][j];\n        }\n        for (int i = 1; i < rows; i++) {\n            for (int j = 1; j < columns; j++) {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n        return dp[rows - 1][columns - 1];\n    }\n}\n```\n\n​\t\t首先判断矩阵是否合乎规范，若矩阵为0或者行数为0或者列数为0，矩阵非法。然后新建一个二维数组，行数列数分别和矩阵相同。新数组的第一行或第一列的数字分别为该行或列前边所有数字的和。然后从第二行第二列遍历数组，数组的值为该位置矩阵的值加上这个数字左边或上边最小的一个数字（因为要开辟一条从左上角到右下角最小的路径，所以这个路径的来路要么是左边要么是右边，只要保证每一步走的路径都是二者中的最小值，那么到最后一个元素的时候也必然是所有元素最小值之和）。因此，最后只需要返回新数组的最后一个数字，就是前边所有数字的最小路径的和。","source":"_posts/abcd.md","raw":"## leecode算法题\n\n<!--more-->\n\n## leecode1.缺失的数字\n\n####  解法：1\n\n```java\nclass Solution {\n    public int missingNumber(int[] nums) {\n     int[] str = new int[nums.length + 1];\n        for(int i = 0;i < nums.length;i++){\n            str[nums[i]] = 1;\n        }\n        int j=0;\n        for(;j < str.length;j++)\n            if(str[j] == 0)\n                break;\n                return j;\n}\n}\n```\n\n​\t\t因为给出的数据都是从0-n线性排列的 ，中间也只会缺少唯一一个数字，所以我们可以通过重新创造一个数组，让原数字变成在新数组中的下标位置，如果新数组下标与已知数字其中一个相同，则赋值为1，最后再遍历数组，返回值为空的元素的下标位置，即缺失的数字。\n\n#### 解法：2\n\n```java\nclass Solution {\n    public int missingNumber(int[] nums) {\n     int res = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tres ^= nums[i]^i;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\treturn res^nums.length;\n\n}\n}\n```\n\n​\t\t通过位运算的操作，在不确定少哪个数字的情况下，对所有的数字和从0-n的数字进行位运算，最终数值和下表都存在的数字位运算后结果为一，最终剩下i,即为缺失的那个数字。\n\n## leecode2.字母异位词分组\n\n``` java\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n             HashMap<String,ArrayList<String>> map=new HashMap<>();\n        for(String s:strs){\n            char[] ch=s.toCharArray();\n            Arrays.sort(ch);\n            String key=String.valueOf(ch);\n            if(!map.containsKey(key))    map.put(key,new ArrayList<>());\n            map.get(key).add(s);\n        }\n        return new ArrayList(map.values());\n\n    }\n}\n```\n\n​\t\t首先创建一张哈希表，然后遍历每一个数组，将字符串转化为数组后，对数组进行排序，并将排序后的数组作为键。如果哈希表中含有改键，则将该数组添加到对应的列表。否则，创建一张空表，并将该数组添加到空表中，往哈希表中添加对应的键和列表，然后用一个新建的列表来存储哈希表的key和value。\n\n## leecode3.金字塔转换矩阵\n\n``` java\nclass Solution {\n        public boolean pyramidTransition(String bottom, List<String> allowed) {\n            if(allowed==null||allowed.size()==0)return false;\n            HashMap<String,List<String>> dir=new HashMap<>(16);\n            for(String str:allowed)\n            {\n                String head=str.substring(0,2);\n                String ch=str.substring(2,3);\n                if(dir.containsKey(head))\n                {\n                    dir.get(head).add(ch);\n                }\n                else\n                {\n                    List<String>p=new ArrayList<>();\n                    p.add(ch);\n                    dir.put(head,p);\n                }\n            }\n            return(dfs(bottom, \"\",dir));}\n        boolean dfs( String last, String now, HashMap<String,List<String>> dir){\n            if(last.length()==2&&now.length()==1) {\n                return true;\n            }\n            if(now.length()==last.length()-1){\n                return dfs(now,\"\",dir);\n            }\n            int start=now.length();int end=now.length()+2;\n            List<String> p=dir.get(last.substring(start, end));\n            if(p==null) return false;\n            for (int i = 0; i < p.size(); i++) {\n                if(dfs(last,now+p.get(i),dir)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n}\n```\n\n​\t\t\n\n​\t\t先新建一张哈希表用来存储所有可能构成塔身的字母组合和构成塔身的字母。通过dfs算法，如果下层长度为2，上层长度为1，则递归结束，可以构成金字塔，返回值为真。如果下层塔身的长度是比上层塔身多一，则说明目前为止是可以继续构成金字塔的，继续递归就行。start是新开始检索的地址，如果p不存在，无法构成塔身。\n\n## leecode4.被围绕的区域\n\n``` java\nclass Solution {\n        public void solve(char[][] board) {\n            if(board==null||board.length==0){\n                return 0;\n            }\n            int m=board.length;\n            int n=board[0].length;\n            for(int i=0;i<m;i++){\n                for(int j=0;j<n;j++){\n                    boolean isEdge=(i==0||j==0||i==m-1||j==n-1);\n                    if(isEdge&&board[i][j]=='O'){//边界的'O'\n                        helper(board,i,j,m,n);//递归\n                    }\n                }\n            }\n            for(int i=0;i<m;i++){\n                for(int j=0;j<n;j++){\n                    if(board[i][j]=='O'){//除了边界的'O'替换\n                        board[i][j]='X';\n                    }\n                    if(board[i][j]=='*'){//边界的'O'再换回来\n                        board[i][j]='O';\n                    }\n                }\n            }\n        }\n\n        public void helper(char[][] board,int i,int j,int m,int n){\n            if(i<0||j<0||i>=m||j>=n||board[i][j]=='X'||board[i][j]=='*'){\n                return;\n            }\n            board[i][j]='*';\n            helper(board,i-1,j,m,n);//上\n            helper(board,i+1,j,m,n);//下\n            helper(board,i,j-1,m,n);//左\n            helper(board,i,j+1,m,n);//右\n        }\n\n    }\n```\n\n​\t\t首先判断矩阵是否合乎规范，如果矩阵为空或者矩阵只有一行，则返回0；m为矩阵行数，n为矩阵列数。然后遍历矩阵，找到边界上的o。然后从边界上的o分别向上下左右方向搜索。直到超出矩阵范围或者碰到不合乎规则的点（与边界连着的o点或者X点）跳出当层递归。当所有的边界上的o点都搜索完成后，结束helper函数。然后再次遍历数组，把所有o变成X，所有*变成o。\n\n## leecode5.最小路径和\n\n``` java\nclass Solution {\n    public int minPathSum(int[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0].length == 0) {\n            return 0;\n        }\n        int rows = grid.length, columns = grid[0].length;\n        int[][] dp = new int[rows][columns];\n        dp[0][0] = grid[0][0];\n        for (int i = 1; i < rows; i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n        for (int j = 1; j < columns; j++) {\n            dp[0][j] = dp[0][j - 1] + grid[0][j];\n        }\n        for (int i = 1; i < rows; i++) {\n            for (int j = 1; j < columns; j++) {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n        return dp[rows - 1][columns - 1];\n    }\n}\n```\n\n​\t\t首先判断矩阵是否合乎规范，若矩阵为0或者行数为0或者列数为0，矩阵非法。然后新建一个二维数组，行数列数分别和矩阵相同。新数组的第一行或第一列的数字分别为该行或列前边所有数字的和。然后从第二行第二列遍历数组，数组的值为该位置矩阵的值加上这个数字左边或上边最小的一个数字（因为要开辟一条从左上角到右下角最小的路径，所以这个路径的来路要么是左边要么是右边，只要保证每一步走的路径都是二者中的最小值，那么到最后一个元素的时候也必然是所有元素最小值之和）。因此，最后只需要返回新数组的最后一个数字，就是前边所有数字的最小路径的和。","slug":"abcd","published":1,"date":"2021-05-11T02:19:42.124Z","updated":"2021-05-11T00:47:12.044Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckojep1b00001hgu95arw5e7w","content":"<h2 id=\"leecode算法题\"><a href=\"#leecode算法题\" class=\"headerlink\" title=\"leecode算法题\"></a>leecode算法题</h2><span id=\"more\"></span>\n\n<h2 id=\"leecode1-缺失的数字\"><a href=\"#leecode1-缺失的数字\" class=\"headerlink\" title=\"leecode1.缺失的数字\"></a>leecode1.缺失的数字</h2><h4 id=\"解法：1\"><a href=\"#解法：1\" class=\"headerlink\" title=\"解法：1\"></a>解法：1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span>[] str = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class=\"line\">            str[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;j &lt; str.length;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str[j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        因为给出的数据都是从0-n线性排列的 ，中间也只会缺少唯一一个数字，所以我们可以通过重新创造一个数组，让原数字变成在新数组中的下标位置，如果新数组下标与已知数字其中一个相同，则赋值为1，最后再遍历数组，返回值为空的元素的下标位置，即缺失的数字。</p>\n<h4 id=\"解法：2\"><a href=\"#解法：2\" class=\"headerlink\" title=\"解法：2\"></a>解法：2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">\t\t\tres ^= nums[i]^i;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res^nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        通过位运算的操作，在不确定少哪个数字的情况下，对所有的数字和从0-n的数字进行位运算，最终数值和下表都存在的数字位运算后结果为一，最终剩下i,即为缺失的那个数字。</p>\n<h2 id=\"leecode2-字母异位词分组\"><a href=\"#leecode2-字母异位词分组\" class=\"headerlink\" title=\"leecode2.字母异位词分组\"></a>leecode2.字母异位词分组</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class=\"line\">             HashMap&lt;String,ArrayList&lt;String&gt;&gt; map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s:strs)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] ch=s.toCharArray();</span><br><span class=\"line\">            Arrays.sort(ch);</span><br><span class=\"line\">            String key=String.valueOf(ch);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!map.containsKey(key))    map.put(key,<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            map.get(key).add(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList(map.values());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        首先创建一张哈希表，然后遍历每一个数组，将字符串转化为数组后，对数组进行排序，并将排序后的数组作为键。如果哈希表中含有改键，则将该数组添加到对应的列表。否则，创建一张空表，并将该数组添加到空表中，往哈希表中添加对应的键和列表，然后用一个新建的列表来存储哈希表的key和value。</p>\n<h2 id=\"leecode3-金字塔转换矩阵\"><a href=\"#leecode3-金字塔转换矩阵\" class=\"headerlink\" title=\"leecode3.金字塔转换矩阵\"></a>leecode3.金字塔转换矩阵</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">pyramidTransition</span><span class=\"params\">(String bottom, List&lt;String&gt; allowed)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(allowed==<span class=\"keyword\">null</span>||allowed.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            HashMap&lt;String,List&lt;String&gt;&gt; dir=<span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String str:allowed)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String head=str.substring(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">                String ch=str.substring(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dir.containsKey(head))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dir.get(head).add(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    List&lt;String&gt;p=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                    p.add(ch);</span><br><span class=\"line\">                    dir.put(head,p);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>(dfs(bottom, <span class=\"string\">&quot;&quot;</span>,dir));&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">dfs</span><span class=\"params\">( String last, String now, HashMap&lt;String,List&lt;String&gt;&gt; dir)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(last.length()==<span class=\"number\">2</span>&amp;&amp;now.length()==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(now.length()==last.length()-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dfs(now,<span class=\"string\">&quot;&quot;</span>,dir);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> start=now.length();<span class=\"keyword\">int</span> end=now.length()+<span class=\"number\">2</span>;</span><br><span class=\"line\">            List&lt;String&gt; p=dir.get(last.substring(start, end));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.size(); i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dfs(last,now+p.get(i),dir)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        </p>\n<p>​        先新建一张哈希表用来存储所有可能构成塔身的字母组合和构成塔身的字母。通过dfs算法，如果下层长度为2，上层长度为1，则递归结束，可以构成金字塔，返回值为真。如果下层塔身的长度是比上层塔身多一，则说明目前为止是可以继续构成金字塔的，继续递归就行。start是新开始检索的地址，如果p不存在，无法构成塔身。</p>\n<h2 id=\"leecode4-被围绕的区域\"><a href=\"#leecode4-被围绕的区域\" class=\"headerlink\" title=\"leecode4.被围绕的区域\"></a>leecode4.被围绕的区域</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(board==<span class=\"keyword\">null</span>||board.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m=board.length;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n=board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> isEdge=(i==<span class=\"number\">0</span>||j==<span class=\"number\">0</span>||i==m-<span class=\"number\">1</span>||j==n-<span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(isEdge&amp;&amp;board[i][j]==<span class=\"string\">&#x27;O&#x27;</span>)&#123;<span class=\"comment\">//边界的&#x27;O&#x27;</span></span><br><span class=\"line\">                        helper(board,i,j,m,n);<span class=\"comment\">//递归</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(board[i][j]==<span class=\"string\">&#x27;O&#x27;</span>)&#123;<span class=\"comment\">//除了边界的&#x27;O&#x27;替换</span></span><br><span class=\"line\">                        board[i][j]=<span class=\"string\">&#x27;X&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(board[i][j]==<span class=\"string\">&#x27;*&#x27;</span>)&#123;<span class=\"comment\">//边界的&#x27;O&#x27;再换回来</span></span><br><span class=\"line\">                        board[i][j]=<span class=\"string\">&#x27;O&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>||j&lt;<span class=\"number\">0</span>||i&gt;=m||j&gt;=n||board[i][j]==<span class=\"string\">&#x27;X&#x27;</span>||board[i][j]==<span class=\"string\">&#x27;*&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            board[i][j]=<span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">            helper(board,i-<span class=\"number\">1</span>,j,m,n);<span class=\"comment\">//上</span></span><br><span class=\"line\">            helper(board,i+<span class=\"number\">1</span>,j,m,n);<span class=\"comment\">//下</span></span><br><span class=\"line\">            helper(board,i,j-<span class=\"number\">1</span>,m,n);<span class=\"comment\">//左</span></span><br><span class=\"line\">            helper(board,i,j+<span class=\"number\">1</span>,m,n);<span class=\"comment\">//右</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        首先判断矩阵是否合乎规范，如果矩阵为空或者矩阵只有一行，则返回0；m为矩阵行数，n为矩阵列数。然后遍历矩阵，找到边界上的o。然后从边界上的o分别向上下左右方向搜索。直到超出矩阵范围或者碰到不合乎规则的点（与边界连着的o点或者X点）跳出当层递归。当所有的边界上的o点都搜索完成后，结束helper函数。然后再次遍历数组，把所有o变成X，所有*变成o。</p>\n<h2 id=\"leecode5-最小路径和\"><a href=\"#leecode5-最小路径和\" class=\"headerlink\" title=\"leecode5.最小路径和\"></a>leecode5.最小路径和</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minPathSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid == <span class=\"keyword\">null</span> || grid.length == <span class=\"number\">0</span> || grid[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rows = grid.length, columns = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[rows][columns];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; columns; j++) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] + grid[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; columns; j++) &#123;</span><br><span class=\"line\">                dp[i][j] = Math.min(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]) + grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[rows - <span class=\"number\">1</span>][columns - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        首先判断矩阵是否合乎规范，若矩阵为0或者行数为0或者列数为0，矩阵非法。然后新建一个二维数组，行数列数分别和矩阵相同。新数组的第一行或第一列的数字分别为该行或列前边所有数字的和。然后从第二行第二列遍历数组，数组的值为该位置矩阵的值加上这个数字左边或上边最小的一个数字（因为要开辟一条从左上角到右下角最小的路径，所以这个路径的来路要么是左边要么是右边，只要保证每一步走的路径都是二者中的最小值，那么到最后一个元素的时候也必然是所有元素最小值之和）。因此，最后只需要返回新数组的最后一个数字，就是前边所有数字的最小路径的和。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"leecode算法题\"><a href=\"#leecode算法题\" class=\"headerlink\" title=\"leecode算法题\"></a>leecode算法题</h2>","more":"<h2 id=\"leecode1-缺失的数字\"><a href=\"#leecode1-缺失的数字\" class=\"headerlink\" title=\"leecode1.缺失的数字\"></a>leecode1.缺失的数字</h2><h4 id=\"解法：1\"><a href=\"#解法：1\" class=\"headerlink\" title=\"解法：1\"></a>解法：1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span>[] str = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class=\"line\">            str[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;j &lt; str.length;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str[j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        因为给出的数据都是从0-n线性排列的 ，中间也只会缺少唯一一个数字，所以我们可以通过重新创造一个数组，让原数字变成在新数组中的下标位置，如果新数组下标与已知数字其中一个相同，则赋值为1，最后再遍历数组，返回值为空的元素的下标位置，即缺失的数字。</p>\n<h4 id=\"解法：2\"><a href=\"#解法：2\" class=\"headerlink\" title=\"解法：2\"></a>解法：2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">\t\t\tres ^= nums[i]^i;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res^nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        通过位运算的操作，在不确定少哪个数字的情况下，对所有的数字和从0-n的数字进行位运算，最终数值和下表都存在的数字位运算后结果为一，最终剩下i,即为缺失的那个数字。</p>\n<h2 id=\"leecode2-字母异位词分组\"><a href=\"#leecode2-字母异位词分组\" class=\"headerlink\" title=\"leecode2.字母异位词分组\"></a>leecode2.字母异位词分组</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class=\"line\">             HashMap&lt;String,ArrayList&lt;String&gt;&gt; map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s:strs)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] ch=s.toCharArray();</span><br><span class=\"line\">            Arrays.sort(ch);</span><br><span class=\"line\">            String key=String.valueOf(ch);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!map.containsKey(key))    map.put(key,<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            map.get(key).add(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList(map.values());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        首先创建一张哈希表，然后遍历每一个数组，将字符串转化为数组后，对数组进行排序，并将排序后的数组作为键。如果哈希表中含有改键，则将该数组添加到对应的列表。否则，创建一张空表，并将该数组添加到空表中，往哈希表中添加对应的键和列表，然后用一个新建的列表来存储哈希表的key和value。</p>\n<h2 id=\"leecode3-金字塔转换矩阵\"><a href=\"#leecode3-金字塔转换矩阵\" class=\"headerlink\" title=\"leecode3.金字塔转换矩阵\"></a>leecode3.金字塔转换矩阵</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">pyramidTransition</span><span class=\"params\">(String bottom, List&lt;String&gt; allowed)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(allowed==<span class=\"keyword\">null</span>||allowed.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            HashMap&lt;String,List&lt;String&gt;&gt; dir=<span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String str:allowed)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                String head=str.substring(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">                String ch=str.substring(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dir.containsKey(head))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dir.get(head).add(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    List&lt;String&gt;p=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                    p.add(ch);</span><br><span class=\"line\">                    dir.put(head,p);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>(dfs(bottom, <span class=\"string\">&quot;&quot;</span>,dir));&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">dfs</span><span class=\"params\">( String last, String now, HashMap&lt;String,List&lt;String&gt;&gt; dir)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(last.length()==<span class=\"number\">2</span>&amp;&amp;now.length()==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(now.length()==last.length()-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dfs(now,<span class=\"string\">&quot;&quot;</span>,dir);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> start=now.length();<span class=\"keyword\">int</span> end=now.length()+<span class=\"number\">2</span>;</span><br><span class=\"line\">            List&lt;String&gt; p=dir.get(last.substring(start, end));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.size(); i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dfs(last,now+p.get(i),dir)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        </p>\n<p>​        先新建一张哈希表用来存储所有可能构成塔身的字母组合和构成塔身的字母。通过dfs算法，如果下层长度为2，上层长度为1，则递归结束，可以构成金字塔，返回值为真。如果下层塔身的长度是比上层塔身多一，则说明目前为止是可以继续构成金字塔的，继续递归就行。start是新开始检索的地址，如果p不存在，无法构成塔身。</p>\n<h2 id=\"leecode4-被围绕的区域\"><a href=\"#leecode4-被围绕的区域\" class=\"headerlink\" title=\"leecode4.被围绕的区域\"></a>leecode4.被围绕的区域</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(board==<span class=\"keyword\">null</span>||board.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m=board.length;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n=board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> isEdge=(i==<span class=\"number\">0</span>||j==<span class=\"number\">0</span>||i==m-<span class=\"number\">1</span>||j==n-<span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(isEdge&amp;&amp;board[i][j]==<span class=\"string\">&#x27;O&#x27;</span>)&#123;<span class=\"comment\">//边界的&#x27;O&#x27;</span></span><br><span class=\"line\">                        helper(board,i,j,m,n);<span class=\"comment\">//递归</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(board[i][j]==<span class=\"string\">&#x27;O&#x27;</span>)&#123;<span class=\"comment\">//除了边界的&#x27;O&#x27;替换</span></span><br><span class=\"line\">                        board[i][j]=<span class=\"string\">&#x27;X&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(board[i][j]==<span class=\"string\">&#x27;*&#x27;</span>)&#123;<span class=\"comment\">//边界的&#x27;O&#x27;再换回来</span></span><br><span class=\"line\">                        board[i][j]=<span class=\"string\">&#x27;O&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>||j&lt;<span class=\"number\">0</span>||i&gt;=m||j&gt;=n||board[i][j]==<span class=\"string\">&#x27;X&#x27;</span>||board[i][j]==<span class=\"string\">&#x27;*&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            board[i][j]=<span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">            helper(board,i-<span class=\"number\">1</span>,j,m,n);<span class=\"comment\">//上</span></span><br><span class=\"line\">            helper(board,i+<span class=\"number\">1</span>,j,m,n);<span class=\"comment\">//下</span></span><br><span class=\"line\">            helper(board,i,j-<span class=\"number\">1</span>,m,n);<span class=\"comment\">//左</span></span><br><span class=\"line\">            helper(board,i,j+<span class=\"number\">1</span>,m,n);<span class=\"comment\">//右</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        首先判断矩阵是否合乎规范，如果矩阵为空或者矩阵只有一行，则返回0；m为矩阵行数，n为矩阵列数。然后遍历矩阵，找到边界上的o。然后从边界上的o分别向上下左右方向搜索。直到超出矩阵范围或者碰到不合乎规则的点（与边界连着的o点或者X点）跳出当层递归。当所有的边界上的o点都搜索完成后，结束helper函数。然后再次遍历数组，把所有o变成X，所有*变成o。</p>\n<h2 id=\"leecode5-最小路径和\"><a href=\"#leecode5-最小路径和\" class=\"headerlink\" title=\"leecode5.最小路径和\"></a>leecode5.最小路径和</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minPathSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid == <span class=\"keyword\">null</span> || grid.length == <span class=\"number\">0</span> || grid[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rows = grid.length, columns = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[rows][columns];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; columns; j++) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] + grid[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; columns; j++) &#123;</span><br><span class=\"line\">                dp[i][j] = Math.min(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]) + grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[rows - <span class=\"number\">1</span>][columns - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        首先判断矩阵是否合乎规范，若矩阵为0或者行数为0或者列数为0，矩阵非法。然后新建一个二维数组，行数列数分别和矩阵相同。新数组的第一行或第一列的数字分别为该行或列前边所有数字的和。然后从第二行第二列遍历数组，数组的值为该位置矩阵的值加上这个数字左边或上边最小的一个数字（因为要开辟一条从左上角到右下角最小的路径，所以这个路径的来路要么是左边要么是右边，只要保证每一步走的路径都是二者中的最小值，那么到最后一个元素的时候也必然是所有元素最小值之和）。因此，最后只需要返回新数组的最后一个数字，就是前边所有数字的最小路径的和。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}